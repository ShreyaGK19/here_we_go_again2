<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GIS Operations Tool</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f5f5;
            overflow: hidden;
        }

        .container {
            display: grid;
            grid-template-columns: 300px 1fr;
            grid-template-rows: 60px 1fr 150px;
            height: 100vh;
            gap: 2px;
        }

        .toolbar {
            grid-column: 1 / -1;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            padding: 0 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .toolbar h1 {
            color: white;
            font-size: 20px;
            margin-right: 30px;
        }

        .toolbar button {
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 8px 16px;
            margin-right: 10px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .toolbar button:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-1px);
        }

        .left-panel {
            background: white;
            border-right: 2px solid #e0e0e0;
            overflow-y: auto;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        }

        .panel-section {
            padding: 15px;
            border-bottom: 1px solid #f0f0f0;
        }

        .panel-section h3 {
            color: #333;
            margin-bottom: 10px;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .layer-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .layer-item:hover {
            background: #e3f2fd;
            transform: translateX(2px);
        }

        .layer-item.selected {
            background: #bbdefb;
            border-color: #2196f3;
        }

        .layer-color {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
            border: 2px solid white;
            box-shadow: 0 0 0 1px #ccc;
        }

        .operation-btn {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            border: none;
            padding: 10px 15px;
            margin: 5px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
            width: calc(50% - 10px);
        }

        .operation-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }

        .operation-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .canvas-container {
            position: relative;
            background: white;
            overflow: hidden;
        }

        #mapCanvas {
            width: 100%;
            height: 100%;
            cursor: grab;
        }

        #mapCanvas:active {
            cursor: grabbing;
        }

        .bottom-panel {
            grid-column: 1 / -1;
            background: #263238;
            color: #b0bec5;
            padding: 15px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            line-height: 1.4;
        }

        .log-entry {
            margin-bottom: 5px;
            padding: 2px 0;
        }

        .log-success { color: #4caf50; }
        .log-error { color: #f44336; }
        .log-info { color: #2196f3; }

        .file-input {
            display: none;
        }

        .coords-display {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 5px 10px;
            border-radius: 3px;
            font-size: 12px;
            font-family: monospace;
        }

        .zoom-controls {
            position: absolute;
            top: 10px;
            left: 10px;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .zoom-btn {
            width: 35px;
            height: 35px;
            background: rgba(255,255,255,0.9);
            border: 1px solid #ccc;
            border-radius: 3px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            font-weight: bold;
            transition: all 0.2s ease;
        }

        .zoom-btn:hover {
            background: white;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .sample-data-btn {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            border: none;
            padding: 8px 12px;
            margin: 5px 0;
            border-radius: 5px;
            cursor: pointer;
            font-size: 11px;
            width: 100%;
            transition: all 0.3s ease;
        }

        .sample-data-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(255, 107, 107, 0.3);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="toolbar">
            <h1>üó∫Ô∏è GIS Operations Tool</h1>
            <button onclick="document.getElementById('fileInput').click()">üìÅ Upload GeoJSON</button>
            <button onclick="exportResults()">üíæ Export Results</button>
            <button onclick="clearAll()">üóëÔ∏è Clear All</button>
            <input type="file" id="fileInput" class="file-input" accept=".geojson,.shp,.wkt" multiple onchange="handleFileUpload(event)">
        </div>

        <div class="left-panel">
            <div class="panel-section">
                <h3>üìä Sample Data</h3>
                <button class="sample-data-btn" onclick="loadSamplePolygons()">Load Sample Polygons</button>
                <button class="sample-data-btn" onclick="loadSampleLines()">Load Sample Roads</button>
                <button class="sample-data-btn" onclick="loadSamplePoints()">Load Sample POIs</button>
            </div>

            <div class="panel-section">
                <h3>üìã Layers</h3>
                <div id="layerList"></div>
            </div>

            <div class="panel-section">
                <h3>üîß Operations</h3>
                <button class="operation-btn" onclick="performOperation('buffer')" id="bufferBtn">Buffer</button>
                <button class="operation-btn" onclick="performOperation('union')" id="unionBtn">Union</button>
                <button class="operation-btn" onclick="performOperation('intersection')" id="intersectionBtn">Intersection</button>
                <button class="operation-btn" onclick="performOperation('difference')" id="differenceBtn">Difference</button>
                <button class="operation-btn" onclick="performOperation('spatialJoin')" id="spatialJoinBtn">Spatial Join</button>
                <!-- <button class="operation-btn" onclick="performOperation('convexHull')" id="convexHullBtn">Convex Hull</button> -->
            </div>
        </div>

        <div class="canvas-container">
            <canvas id="mapCanvas"></canvas>
            <div class="coords-display" id="coordsDisplay">X: 0, Y: 0</div>
            <div class="zoom-controls">
                <button class="zoom-btn" onclick="zoomIn()">+</button>
                <button class="zoom-btn" onclick="zoomOut()">-</button>
            </div>
        </div>

        <div class="bottom-panel" id="logPanel">
            <div class="log-entry log-info">üöÄ GIS Tool initialized. Upload GeoJSON files or load sample data to begin.</div>
        </div>
    </div>

    <script>
        // Global variables
        let layers = [];
        let selectedLayers = [];
        let canvas, ctx;
        let transform = { x: 0, y: 0, scale: 1 };
        let isDragging = false;
        let lastMouse = { x: 0, y: 0 };

        // Initialize canvas
        function initCanvas() {
            canvas = document.getElementById('mapCanvas');
            ctx = canvas.getContext('2d');
            
            // Set canvas size
            function resizeCanvas() {
                const container = canvas.parentElement;
                canvas.width = container.clientWidth;
                canvas.height = container.clientHeight;
                render();
            }
            
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);
            
            // Mouse events
            canvas.addEventListener('mousedown', handleMouseDown);
            canvas.addEventListener('mousemove', handleMouseMove);
            canvas.addEventListener('mouseup', handleMouseUp);
            canvas.addEventListener('wheel', handleWheel);
        }

        // Transform coordinates
        function worldToScreen(x, y) {
            return {
                x: (x + transform.x) * transform.scale + canvas.width / 2,
                y: (y + transform.y) * transform.scale + canvas.height / 2
            };
        }

        function screenToWorld(x, y) {
            return {
                x: (x - canvas.width / 2) / transform.scale - transform.x,
                y: (y - canvas.height / 2) / transform.scale - transform.y
            };
        }

        // Mouse handlers
        function handleMouseDown(e) {
            isDragging = true;
            lastMouse = { x: e.clientX, y: e.clientY };
        }

        function handleMouseMove(e) {
            const worldPos = screenToWorld(e.offsetX, e.offsetY);
            document.getElementById('coordsDisplay').textContent = 
                `X: ${worldPos.x.toFixed(2)}, Y: ${worldPos.y.toFixed(2)}`;

            if (isDragging) {
                const dx = e.clientX - lastMouse.x;
                const dy = e.clientY - lastMouse.y;
                transform.x += dx / transform.scale;
                transform.y += dy / transform.scale;
                lastMouse = { x: e.clientX, y: e.clientY };
                render();
            }
        }

        function handleMouseUp(e) {
            isDragging = false;
        }

        function handleWheel(e) {
            e.preventDefault();
            const factor = e.deltaY > 0 ? 0.9 : 1.1;
            transform.scale *= factor;
            transform.scale = Math.max(0.1, Math.min(10, transform.scale));
            render();
        }

        // Zoom controls
        function zoomIn() {
            transform.scale *= 1.2;
            transform.scale = Math.min(10, transform.scale);
            render();
        }

        function zoomOut() {
            transform.scale *= 0.8;
            transform.scale = Math.max(0.1, transform.scale);
            render();
        }

        // Rendering
        function render() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid
            drawGrid();
            
            // Draw layers
            layers.forEach(layer => {
                if (layer.visible) {
                    drawLayer(layer);
                }
            });
        }

        function drawGrid() {
            ctx.strokeStyle = '#f0f0f0';
            ctx.lineWidth = 1;
            
            const gridSize = 50 * transform.scale;
            const offsetX = (transform.x * transform.scale) % gridSize;
            const offsetY = (transform.y * transform.scale) % gridSize;
            
            ctx.beginPath();
            for (let x = offsetX; x < canvas.width; x += gridSize) {
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
            }
            for (let y = offsetY; y < canvas.height; y += gridSize) {
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
            }
            ctx.stroke();
        }

        function drawLayer(layer) {
            ctx.strokeStyle = layer.color;
            ctx.fillStyle = layer.color + '40';
            ctx.lineWidth = 2;

            layer.features.forEach(feature => {
                const geom = feature.geometry;
                
                if (geom.type === 'Polygon') {
                    drawPolygon(geom.coordinates[0]);
                } else if (geom.type === 'LineString') {
                    drawLineString(geom.coordinates);
                } else if (geom.type === 'Point') {
                    drawPoint(geom.coordinates);
                }
            });
        }

        function drawPolygon(coordinates) {
            if (coordinates.length < 3) return;
            
            ctx.beginPath();
            const start = worldToScreen(coordinates[0][0], -coordinates[0][1]);
            ctx.moveTo(start.x, start.y);
            
            for (let i = 1; i < coordinates.length; i++) {
                const point = worldToScreen(coordinates[i][0], -coordinates[i][1]);
                ctx.lineTo(point.x, point.y);
            }
            ctx.closePath();
            ctx.fill();
            ctx.stroke();
        }

        function drawLineString(coordinates) {
            if (coordinates.length < 2) return;
            
            ctx.beginPath();
            const start = worldToScreen(coordinates[0][0], -coordinates[0][1]);
            ctx.moveTo(start.x, start.y);
            
            for (let i = 1; i < coordinates.length; i++) {
                const point = worldToScreen(coordinates[i][0], -coordinates[i][1]);
                ctx.lineTo(point.x, point.y);
            }
            ctx.stroke();
        }

        function drawPoint(coordinates) {
            const point = worldToScreen(coordinates[0], -coordinates[1]);
            ctx.beginPath();
            ctx.arc(point.x, point.y, 5, 0, 2 * Math.PI);
            ctx.fill();
            ctx.stroke();
        }

        function addLayer(name, geojson, color) {
            const layer = {
                id: Date.now(),
                name: name,
                features: geojson.features || [geojson],
                color: color || getRandomColor(),
                visible: true,
                selected: false
            };
            
            layers.push(layer);
            updateLayerList();
            fitToLayers();
            render();
            logMessage(`Layer "${name}" added successfully`, 'success');
        }

        function updateLayerList() {
            const layerList = document.getElementById('layerList');
            layerList.innerHTML = '';
            
            layers.forEach(layer => {
                const layerDiv = document.createElement('div');
                layerDiv.className = `layer-item ${layer.selected ? 'selected' : ''}`;
                layerDiv.onclick = () => toggleLayerSelection(layer.id);
                
                layerDiv.innerHTML = `
                    <span class="layer-color" style="background-color: ${layer.color}"></span>
                    <span>${layer.name}</span>
                `;
                
                layerList.appendChild(layerDiv);
            });
            
            updateOperationButtons();
        }

        function toggleLayerSelection(layerId) {
            const layer = layers.find(l => l.id === layerId);
            if (layer) {
                layer.selected = !layer.selected;
                updateLayerList();
            }
        }

        function updateOperationButtons() {
            const selectedCount = layers.filter(l => l.selected).length;
            
            document.getElementById('bufferBtn').disabled = selectedCount !== 1;
            document.getElementById('unionBtn').disabled = selectedCount < 2;
            document.getElementById('intersectionBtn').disabled = selectedCount < 2;
            document.getElementById('differenceBtn').disabled = selectedCount !== 2;
            document.getElementById('spatialJoinBtn').disabled = selectedCount !== 1;
            // document.getElementById('convexHullBtn').disabled = selectedCount !== 1;
        }

        function loadSamplePolygons() {
            const samplePolygons = {
                type: "FeatureCollection",
                features: [
                    {
                        type: "Feature",
                        properties: { name: "Park Area" },
                        geometry: {
                            type: "Polygon",
                            coordinates: [[[0, 0], [100, 0], [100, 80], [0, 80], [0, 0]]]
                        }
                    },
                    {
                        type: "Feature",
                        properties: { name: "Building Zone" },
                        geometry: {
                            type: "Polygon",
                            coordinates: [[[50, 40], [150, 40], [150, 120], [50, 120], [50, 40]]]
                        }
                    }
                ]
            };
            addLayer('Sample Polygons', samplePolygons, '#4CAF50');
        }

        function loadSampleLines() {
            const sampleLines = {
                type: "FeatureCollection",
                features: [
                    {
                        type: "Feature",
                        properties: { name: "Main Street" },
                        geometry: {
                            type: "LineString",
                            coordinates: [[-50, -20], [0, 0], [50, 20], [100, 0], [150, -10]]
                        }
                    },
                    {
                        type: "Feature",
                        properties: { name: "Oak Avenue" },
                        geometry: {
                            type: "LineString",
                            coordinates: [[20, -50], [40, 0], [60, 50], [80, 100]]
                        }
                    }
                ]
            };
            addLayer('Sample Roads', sampleLines, '#2196F3');
        }

        function loadSamplePoints() {
            const samplePoints = {
                type: "FeatureCollection",
                features: [
                    {
                        type: "Feature",
                        properties: { name: "Hospital" },
                        geometry: { type: "Point", coordinates: [30, 60] }
                    },
                    {
                        type: "Feature",
                        properties: { name: "School" },
                        geometry: { type: "Point", coordinates: [120, 30] }
                    },
                    {
                        type: "Feature",
                        properties: { name: "Mall" },
                        geometry: { type: "Point", coordinates: [80, 90] }
                    }
                ]
            };
            addLayer('Sample POIs', samplePoints, '#FF9800');
        }

        function handleFileUpload(event) {
            const files = event.target.files;
            
            for (let file of files) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const geojson = JSON.parse(e.target.result);
                        addLayer(file.name, geojson);
                    } catch (error) {
                        logMessage(`Error parsing ${file.name}: ${error.message}`, 'error');
                    }
                };
                reader.readAsText(file);
            }
        }
        function handleFileUpload(event) {
            const files = event.target.files;
            
            for (let file of files) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const geojson = JSON.parse(e.target.result);
                        addLayer(file.name, geojson);
                    } catch (error) {
                        logMessage(`Error parsing ${file.name}: ${error.message}`, 'error');
                    }
                };
                reader.readAsText(file);
            }
        }
        function performOperation(operation) {
            const selected = layers.filter(l => l.selected);
            
            try {
                switch (operation) {
                    case 'buffer':
                        if (selected.length === 1) {
                            createBufferLayer(selected[0]);
                        }
                        break;
                    case 'union':
                        if (selected.length >= 2) {
                            createUnionLayer(selected);
                        }
                        break;
                    case 'spatial join':
                        if (selected.length === 1) {
                            createSpatialJoinLayer(selected[0]);
                        }
                        break;
                    default:
                        logMessage(`Operation "${operation}" not yet implemented`, 'info');
                }
            } catch (error) {
                logMessage(`Operation failed: ${error.message}`, 'error');
            }
        }

        function createBufferLayer(layer) {
            if (layer.features.length === 0) return;
            const bufferedFeatures = layer.features.map(feature => {
                if (feature.geometry.type === 'Point') {
                    const [x, y] = feature.geometry.coordinates;
                    const radius = 20;
                    const sides = 16;
                    const coordinates = [];
                    
                    for (let i = 0; i <= sides; i++) {
                        const angle = (i / sides) * 2 * Math.PI;
                        coordinates.push([
                            x + radius * Math.cos(angle),
                            y + radius * Math.sin(angle)
                        ]);
                    }
                    
                    return {
                        type: "Feature",
                        properties: { ...feature.properties, buffered: true },
                        geometry: {
                            type: "Polygon",
                            coordinates: [coordinates]
                        }
                    };
                }
                return feature;
            });
            
            addLayer(`${layer.name} (Buffered)`, { 
                type: "FeatureCollection", 
                features: bufferedFeatures 
            }, '#9C27B0');
        }

        function createSpatialJoinLayer(layer) {
            const joinedFeatures = layer.features.map(feature => {
                const joined = findIntersectingFeatures(feature);
                return {
                    type: "Feature",
                    properties: { ...feature.properties, joined: joined.length > 0 },
                    geometry: feature.geometry
                };
            });

            addLayer(`${layer.name} (Spatial Join)`, {
                type: "FeatureCollection",
                features: joinedFeatures
            }, '#E91E63');
        }
        function findIntersectingFeatures(feature) {
            return layers.flatMap(layer => {
                if (layer === feature) return [];
                return layer.features.filter(other => {
                    return intersects(feature.geometry, other.geometry);
                });
            });
        }

        function createCentroidLayer(layer) {
            const centroids = layer.features.map(feature => {
                let centroid = [0, 0];

                if (feature.geometry.type === 'Point') {
                    centroid = feature.geometry.coordinates;
                } else if (feature.geometry.type === 'Polygon') {
                    const coords = feature.geometry.coordinates[0];
                    let x = 0, y = 0;
                    for (let point of coords) {
                        x += point[0];
                        y += point[1];
                    }
                    centroid = [x / coords.length, y / coords.length];
                }
                return {
                    type: "Feature",
                    properties: { ...feature.properties, centroid: true },
                    geometry: {
                        type: "Point",
                        coordinates: centroid
                    }
                };
            });
            
            addLayer(`${layer.name} (Centroids)`, {
                type: "FeatureCollection",
                features: centroids
            }, '#E91E63');
        }

        function createUnionLayer(selectedLayers) {
            if (selectedLayers.length < 2) return;
            const unionedFeatures = selectedLayers.reduce((acc, layer) => {
                return acc.concat(layer.features);
            }, []);
            const allFeatures = [];
            selectedLayers.forEach(layer => {
                allFeatures.push(...layer.features);
            });
            
            addLayer('Union Result', {
                type: "FeatureCollection",
                features: allFeatures
            }, '#FF5722');
        }

        function getRandomColor() {
            const colors = ['#4CAF50', '#2196F3', '#FF9800', '#9C27B0', '#F44336', '#00BCD4', '#CDDC39'];
            return colors[Math.floor(Math.random() * colors.length)];
        }

        function fitToLayers() {
            if (layers.length === 0) return;
            
            let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
            
            layers.forEach(layer => {
                layer.features.forEach(feature => {
                    const coords = feature.geometry.coordinates;
                    
                    if (feature.geometry.type === 'Point') {
                        minX = Math.min(minX, coords[0]);
                        maxX = Math.max(maxX, coords[0]);
                        minY = Math.min(minY, coords[1]);
                        maxY = Math.max(maxY, coords[1]);
                    } else if (feature.geometry.type === 'LineString') {
                        coords.forEach(point => {
                            minX = Math.min(minX, point[0]);
                            maxX = Math.max(maxX, point[0]);
                            minY = Math.min(minY, point[1]);
                            maxY = Math.max(maxY, point[1]);
                        });
                    } else if (feature.geometry.type === 'Polygon') {
                        coords[0].forEach(point => {
                            minX = Math.min(minX, point[0]);
                            maxX = Math.max(maxX, point[0]);
                            minY = Math.min(minY, point[1]);
                            maxY = Math.max(maxY, point[1]);
                        });
                    }
                });
            });
            
            const centerX = (minX + maxX) / 2;
            const centerY = (minY + maxY) / 2;
            const width = maxX - minX;
            const height = maxY - minY;
            
            const scaleX = canvas.width / (width + 100);
            const scaleY = canvas.height / (height + 100);
            transform.scale = Math.min(scaleX, scaleY, 2);
            
            transform.x = -centerX;
            transform.y = centerY;
        }

        function logMessage(message, type = 'info') {
            const logPanel = document.getElementById('logPanel');
            const entry = document.createElement('div');
            entry.className = `log-entry log-${type}`;
            entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
            logPanel.appendChild(entry);
            logPanel.scrollTop = logPanel.scrollHeight;
        }

        function exportResults() {
            if (layers.length === 0) {
                logMessage('No layers to export', 'error');
                return;
            }
            
            const exportData = {
                type: "FeatureCollection",
                features: []
            };
            
            layers.forEach(layer => {
                exportData.features.push(...layer.features);
            });
            
            const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'gis_results.geojson';
            a.click();
            URL.revokeObjectURL(url);
            
            logMessage('Results exported successfully', 'success');
        }

        function clearAll() {
            layers = [];
            selectedLayers = [];
            updateLayerList();
            render();
            logMessage('All layers cleared', 'info');
        }

        // Initialize
        window.onload = function() {
            initCanvas();
            logMessage('GIS Tool ready! Load sample data or upload GeoJSON files to begin.', 'success');
        };
    </script>
</body>
</html>